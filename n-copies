#!/usr/bin/env python3
# runs n-copies of a given binary in SPEC CPU-rate style
# Author: Ahmad Yasin
# edited: Aug 2022
#
from __future__ import print_function
__author__ = 'ayasin'

import common as C
import os, sys
if sys.version_info[0] < 3:
  raise Exception("Must be using Python 3")

# usage: [V=1] n-copies <N> <app> [<and> <its> <args>]
assert len(sys.argv) > 2
n = int(C.arg(1, "2"))
app = ' '.join(sys.argv[2:])

verbose = os.getenv('V')
reuse = os.getenv('REUSE')

cpu_count = os.cpu_count()
if n > cpu_count: C.error('Too large # of copies %d ( > %d )' % (n, cpu_count))

name = './.%s-%03d.cmd' % (C.chop(app.split()[0].split('/')[-1]), n)

def gen_cmd():
  cmds = []
  cpus = None
  if n == 2:
    cpus = [int(x) for x in C.exe2list('pmu-tools/cputop "core == 0 and socket == 0"')]
  elif n <= os.cpu_count() / 2:
    cpus = [int(x) for x in C.exe2list('pmu-tools/cputop "thread == 0" | head -%d' % n)]
  else:
    cpus = [i for i in range(n)]
  while len(cpus): cmds += ["taskset -c %d %s" % (cpus.pop(0), app)]
  C.par_jobs_file(cmds, name, verbose)

if reuse and os.path.isfile(name): pass
else: gen_cmd()
C.exe_cmd('. ' + name)
